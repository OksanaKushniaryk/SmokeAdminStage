// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')
const fs = require('fs')

describe('createVolunteerCP', function() {
  this.timeout(60000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('should log in and fill user fields', async function() {
    // 1. Go to login page
    await driver.get("https://admin.stage.vcc.hebronsoft.com/auth/login")
    await driver.manage().window().setRect({ width: 1440, height: 900 })

    // 2. Log in
    await driver.wait(until.elementLocated(By.id("login-email")), 10000)
    await driver.findElement(By.id("login-email")).sendKeys("qwe@qwe.com")
    await driver.findElement(By.id("login-pass")).sendKeys("qweQWE123")
    await driver.findElement(By.id("log-btn")).click()

    // 3. Wait for dashboard to confirm login
    await driver.wait(until.elementLocated(By.id("partners-btn")), 10000, "Login failed or dashboard not loaded")
    await driver.takeScreenshot().then(img => fs.writeFileSync('debug_after_login.png', img, 'base64'))

    // 4. Click Partners
    await driver.findElement(By.id("partners-btn")).click()

    // 5. Click Community Partners
    const communityPartnersOption = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'item-title') and text()='Community Partners']")),
      10000
    )
    await communityPartnersOption.click()

    // 6. Wait for filter input and filter for 'hebron'
    await driver.wait(until.urlContains('/company/list'), 10000)
    const nameFilterInput = await driver.wait(
      until.elementLocated(By.css('input.p-column-filter.max-with.p-inputtext.p-component')),
      10000
    )
    await nameFilterInput.clear()
    await nameFilterInput.sendKeys('hebron')

    // 7. Wait for HEBRON row and click it
    const hebronRow = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'pointable') and contains(translate(normalize-space(text()), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'), 'HEBRON')]")),
      10000
    )
    await driver.wait(until.elementIsVisible(hebronRow), 10000)
    await hebronRow.click()

    // 8. Click the "3. Request Volunteers" tab
    const requestVolunteersTab = await driver.wait(
      until.elementLocated(By.xpath("//a[contains(@class, 'body-2') and contains(normalize-space(text()), '3. Request Volunteers')]")),
      10000
    )
    await driver.wait(until.elementIsVisible(requestVolunteersTab), 10000)
    await requestVolunteersTab.click()

    // 9. Click "Create Need For Volunteers"
    const createNeedForVolunteersButton = await driver.wait(
        until.elementLocated(By.xpath("//button[contains(.,'Create Need For Volunteers')]")),
        10000
    )
    await createNeedForVolunteersButton.click()

    // 9.5. Handle new tab that opens
    await driver.wait(async () => {
        const handles = await driver.getAllWindowHandles();
        return handles.length > 1;
    }, 10000, "New tab did not open");
    
    const handles = await driver.getAllWindowHandles();
    await driver.switchTo().window(handles[handles.length - 1]);
    
    // Wait for the new page to load with the expected URL
    await driver.wait(until.urlContains('/projects/create'), 10000, "New tab did not load the expected URL");
    await driver.wait(until.urlContains('partnersId='), 10000, "URL does not contain partnersId parameter");

    // Wait for page to fully load
    await driver.sleep(2000);

    // 10. Fill in Title using formcontrolname attributes
    const titleInput = await driver.wait(
    until.elementLocated(By.css(" input[formcontrolname='title']")),
    10000,
    "Title input not found"
    )
    await titleInput.sendKeys("Reading Buddies for Kids")
    
    // 11. Fill in Mini Description
    const miniDescriptionInput = await driver.findElement(By.css('.mini-description-input'));
    await miniDescriptionInput.click();
    const miniDescText = 'Help young students improve their reading skills through one-on-one sessions.';
    for (const char of miniDescText) {
        await miniDescriptionInput.sendKeys(char);
    }
    await driver.executeScript("arguments[0].blur();", miniDescriptionInput);

    // 12. Fill in Description using sendKeys and blur
    const descriptionInput = await driver.findElement(By.xpath("//ngx-editor/div/div"));
    await descriptionInput.click();
    await descriptionInput.sendKeys("We are looking for compassionate volunteers to spend 1–2 hours per week reading with elementary school students. Volunteers will be matched with a student and provided with age-appropriate books and materials. No teaching experience necessary—just patience and encouragement!");
    await driver.executeScript("arguments[0].blur();", descriptionInput);

    // 13. Find the section by its heading text, then find the checkbox input within it
    const section = await driver.findElement(By.xpath("//div[contains(., 'Address where the new volunteer opportunity will take place:')]"));
    const checkbox = await section.findElement(By.css("input[type='checkbox'].mat-checkbox-input"));
    
    // 14. Check if the checkbox is enabled
    const isCheckboxEnabled = await checkbox.isEnabled();
    assert(isCheckboxEnabled, "Checkbox should be enabled");

    // 15. Click the checkbox container instead of the input (this is the correct way)
    const checkboxContainer = await section.findElement(By.css("div.mat-checkbox-inner-container"));
    await checkboxContainer.click();

    // 16. Wait for and verify Address Line 1 is populated
    const addressLine1Input = await driver.wait(
        until.elementLocated(By.css("input[formcontrolname='addressLine']")),
        10000,
        "Address Line 1 input not found"
    );
    await driver.wait(until.elementIsVisible(addressLine1Input), 5000, "Address Line 1 input not visible");
    const addressLine1Value = await addressLine1Input.getAttribute('value');
    assert(addressLine1Value.length > 0, "Address Line 1 should be automatically populated");

    // 17. Wait for and verify Zip Code is populated
    const zipCodeInput = await driver.wait(
        until.elementLocated(By.css("input[formcontrolname='zipCode']")),
        10000,
        "Zip Code input not found"
    );
    await driver.wait(until.elementIsVisible(zipCodeInput), 5000, "Zip Code input not visible");
    const zipCodeValue = await zipCodeInput.getAttribute('value');
    assert(zipCodeValue.length > 0, "Zip Code should be automatically populated");

    // 18. Select 'Ongoing' from the Type dropdown using JavaScript click
    const typeDropdown = await driver.findElement(By.css('mat-select[formcontrolname="type"]'));
    await typeDropdown.click();
    await driver.wait(until.elementLocated(By.css('.mat-select-panel')), 5000);
    const ongoingOption = await driver.findElement(By.xpath("//mat-option//span[contains(text(), 'Ongoing')]"));
    await driver.executeScript("arguments[0].click();", ongoingOption);
    await driver.sleep(500);

    // 19. Click the dropdown and wait for options panel
    await driver.findElement(By.id("mat-select-value-1")).click()

    // 20. Wait for the dropdown panel to be visible
    await driver.wait(
        until.elementLocated(By.css("#mat-option-0 > .mat-option-text")),
        10000,
        "Dropdown panel not found"
    )

    // 21. Wait for save button to be present
    await driver.wait(until.elementLocated(By.id("save-section-btn")), 10000);
    const saveButton = await driver.findElement(By.id("save-section-btn"));
    const isDisplayed = await saveButton.isDisplayed();
    const isEnabled = await saveButton.isEnabled();
    const isDisabledAttr = await saveButton.getAttribute('disabled');
    console.log("Save button displayed:", isDisplayed, "enabled:", isEnabled, "disabled attribute:", isDisabledAttr);
    await driver.wait(until.elementIsEnabled(saveButton), 10000);

    // 22. Click save button using JavaScript executor
    await driver.executeScript("arguments[0].click();", saveButton)

    // 22.5. Add debugging to see what happens after save
    console.log("Save button clicked, waiting for response...");
    
    // Wait a moment for any immediate response
    await driver.sleep(2000);
    
    // Check for any error messages
    try {
        const errorElements = await driver.findElements(By.css(".error-message, .mat-error, .control-error"));
        if (errorElements.length > 0) {
            console.log("Found error messages:");
            for (let i = 0; i < errorElements.length; i++) {
                const errorText = await errorElements[i].getText();
                console.log(`Error ${i + 1}: ${errorText}`);
            }
        }
    } catch (e) {
        console.log("No error messages found");
    }
    
    // Check current URL to see if we're still on the form page
    const currentUrl = await driver.getCurrentUrl();
    console.log("Current URL after save:", currentUrl);
    
    // Check if we're redirected to a list page (successful creation)
    if (currentUrl.includes('/list') || currentUrl.includes('/projects')) {
        console.log("Successfully redirected to list page - volunteer created!");
    } else {
        console.log("Still on form page - volunteer may not have been created");
    }

    // 23. Wait for and verify toast message
    try {
        await driver.wait(until.elementLocated(By.css(".toast-message")), 10000)
        const toastMessage = await driver.findElement(By.css(".toast-message"))
        await driver.wait(until.elementIsVisible(toastMessage), 10000)
        
        const toastText = await toastMessage.getText();
        console.log("Toast message received:", toastText);
        
        // Check if toast indicates success or error
        if (toastText.toLowerCase().includes('error') || toastText.toLowerCase().includes('failed')) {
            console.log("Toast indicates an error occurred");
        } else {
            console.log("Toast indicates success");
        }
    } catch (e) {
        console.log("No toast message found within 10 seconds");
    }
  })
})