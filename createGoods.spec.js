// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('createGoods', function () {
    this.timeout(30000)
    let driver
    let vars
    beforeEach(async function () {
        driver = await new Builder().forBrowser('chrome').build()
        vars = {}
    })
    afterEach(async function () {
        await driver.quit();
    })
    it('createGoods', async function () {
        // Navigate to login page
        await driver.get("https://admin.stage.vcc.hebronsoft.com/auth/login")
        await driver.manage().window().setRect({ width: 1440, height: 900 })

        // Wait for and fill login form
        await driver.wait(until.elementLocated(By.id("login-email")), 10000, "Login email field not found")
        await driver.findElement(By.id("login-email")).sendKeys("qwe@qwe.com")
        await driver.findElement(By.id("login-pass")).sendKeys("qweQWE123")
        await driver.findElement(By.id("log-btn")).click()

        // Wait for navigation and click on Partners
        await driver.wait(until.elementLocated(By.id("partners-btn")), 10000, "Partners button not found")
        const partnersButton = await driver.findElement(By.id("partners-btn"))
        await partnersButton.click()

        // Wait for and click on Needs For Goods in the dropdown
        const needsForGoodsOption = await driver.wait(
            until.elementLocated(By.xpath("//div[contains(@class, 'item-title') and text()='Needs For Goods']")),
            10000,
            "Needs For Goods option not found"
        )
        await needsForGoodsOption.click()

        // Wait for and click Create Needs For Goods button
        const createNeedsForGoodsButton = await driver.wait(
            until.elementLocated(By.xpath("//button[contains(.,'Create Needs For Goods')]")),
            10000
        )
        await createNeedsForGoodsButton.click()

        // Click the autocomplete input to open the dropdown
        const autocompleteInput = await driver.findElement(By.css('input.mat-autocomplete-trigger'));
        await autocompleteInput.click();

        // Wait for the dropdown option to appear and click it
        const option = await driver.wait(
            until.elementLocated(By.xpath("//mat-option//span[contains(text(), '13th Street Cat Rescue')]")),
            10000,
            "Dropdown option not found"
        );
        await option.click();

        // Fill in Title using formcontrolname attributes
        const titleInput = await driver.wait(
            until.elementLocated(By.css(" input[formcontrolname='title']")),
            10000,
            "Title input not found"
        )
        await titleInput.sendKeys("Hygiene Kits for the Homeless")

        // Fill in Mini Description
        const miniDescriptionInput = await driver.findElement(By.css('.mini-description-input'));
        await miniDescriptionInput.click();
        const miniDescText = 'Donate personal hygiene items to support individuals experiencing homelessness.';
        for (const char of miniDescText) {
          await miniDescriptionInput.sendKeys(char);
        }
        await driver.executeScript("arguments[0].blur();", miniDescriptionInput);
        // Focus the Title input to help trigger validation
        const titleInputFocus = await driver.findElement(By.css("input[formcontrolname='title']"));
        await titleInputFocus.click();

        // Fill in Description using sendKeys and blur
        const descriptionInput = await driver.findElement(By.xpath("//ngx-editor/div/div"));
        await descriptionInput.click();
        await descriptionInput.sendKeys('Our organization is assembling hygiene kits for distribution to people living on the streets and in shelters. We are seeking donations of travel-size shampoo, soap, toothpaste, toothbrushes, deodorant, feminine hygiene products, and socks. These simple items help restore dignity and improve daily living conditions for those in need. All donations will be sorted and packed by volunteers before being distributed throughout the city.');
        await driver.executeScript("arguments[0].blur();", descriptionInput);

        // Select 'Ongoing' from the Type dropdown using JavaScript click
        const typeDropdown = await driver.findElement(By.css('mat-select[formcontrolname="type"]'));
        await typeDropdown.click();
        await driver.wait(until.elementLocated(By.css('.mat-select-panel')), 5000);
        const ongoingOption = await driver.findElement(By.xpath("//mat-option//span[contains(text(), 'Ongoing')]"));
        await driver.executeScript("arguments[0].click();", ongoingOption);
        await driver.sleep(500);

        // Click the dropdown and wait for options panel
        await driver.findElement(By.id("mat-select-value-1")).click()

        // Wait for the dropdown panel to be visible
        await driver.wait(
            until.elementLocated(By.css("#mat-option-0 > .mat-option-text")),
            10000,
            "Dropdown panel not found"
        )

        // Wait for save button to be present
        await driver.wait(until.elementLocated(By.id("save-section-btn")), 10000);
        const saveButton = await driver.findElement(By.id("save-section-btn"));
        const isDisplayed = await saveButton.isDisplayed();
        const isEnabled = await saveButton.isEnabled();
        const isDisabledAttr = await saveButton.getAttribute('disabled');
        console.log("Save button displayed:", isDisplayed, "enabled:", isEnabled, "disabled attribute:", isDisabledAttr);
        await driver.wait(until.elementIsEnabled(saveButton), 10000);

        // Click save button using JavaScript executor
        await driver.executeScript("arguments[0].click();", saveButton)

        // Wait for and verify toast message
        await driver.wait(until.elementLocated(By.css(".toast-message")), 10000)
        const toastMessage = await driver.findElement(By.css(".toast-message"))
        await driver.wait(until.elementIsVisible(toastMessage), 10000)

        // Wait for table to be present
        await driver.wait(
            until.elementLocated(By.css("p-table")),
            10000,
            "Table not found"
        )

        // Wait for the new Goods to appear in the table
        const goodsCell = await driver.wait(
            until.elementLocated(By.xpath("//div[contains(@class, 'body-1') and text()=' Hygiene Kits for the Homeless ']")),
            10000,
            "New Goods not found in table"
        )

        // Assert that the row exists
        assert.ok(goodsCell, "Row with new Goods should exist")

        await driver.close()
    })
})