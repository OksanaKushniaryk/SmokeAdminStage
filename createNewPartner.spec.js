// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('createNewPartner', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('createNewPartner', async function() {
    // Navigate to login page
    await driver.get("https://admin.stage.vcc.hebronsoft.com/auth/login")
    await driver.manage().window().setRect({ width: 1440, height: 900 })

    // Wait for and fill login form
    await driver.wait(until.elementLocated(By.id("login-email")), 10000, "Login email field not found")
    await driver.findElement(By.id("login-email")).sendKeys("qwe@qwe.com")
    await driver.findElement(By.id("login-pass")).sendKeys("qweQWE123")
    await driver.findElement(By.id("log-btn")).click()
    
    // Wait for navigation and click on Partners
    await driver.wait(until.elementLocated(By.id("partners-btn")), 10000, "Partners button not found")
    const partnersButton = await driver.findElement(By.id("partners-btn"))
    await partnersButton.click()
    
    // Wait for and click on Community Partners in the dropdown
    const communityPartnersOption = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'item-title') and text()='Community Partners']")),
      10000,
      "Community Partners option not found"
    )
    await communityPartnersOption.click()
    
    // Wait for and click Create A New Partner button
    const addPartnerButton = await driver.wait(
      until.elementLocated(By.xpath("//button[contains(.,'Create A New Partner')]")),
      10000
    )
    await addPartnerButton.click()
    
    // Fill in organization name using formcontrolname attributes
    const organizationNameInput = await driver.wait(
      until.elementLocated(By.css(" input[formcontrolname='organizationName']")),
      10000,
      "Organization name input not found"
    )
    await organizationNameInput.sendKeys("Literacy for All")
    
    // Fill in EIN using formcontrolname attributes
    const EINInput = await driver.wait(
      until.elementLocated(By.css(" input[formcontrolname='ein']")),
      10000,
      "EIN input not found"
    )
    await EINInput.sendKeys("33-5544332")

    // Fill in address line using formcontrolname attributes
    const addressLineInput = await driver.wait(
      until.elementLocated(By.css(" input[formcontrolname='addressLineFirst']")),
      10000,
      "Address line input not found"
    )
    await addressLineInput.sendKeys("88 Learning Circle")
    
    // Click the dropdown and wait for options panel
    await driver.findElement(By.id("mat-select-value-1")).click()
    
    // Wait for the dropdown panel to be visible
    await driver.wait(
      until.elementLocated(By.css(".mat-select-panel")),
      10000,
      "Dropdown panel not found"
    )
    
    // Try to find the option with a more flexible selector
    let option;
    try {
      option = await driver.wait(
        until.elementLocated(By.xpath("//mat-option//span[contains(text(), 'Public school')]")),
        10000
      )
    } catch (e) {
      // If not found, print all available options for debugging
      const options = await driver.findElements(By.css("mat-option .mat-option-text"));
      const optionTexts = [];
      for (const opt of options) {
        optionTexts.push(await opt.getText());
      }
      throw new Error("'Public school' option not found. Available options: " + JSON.stringify(optionTexts));
    }
    await option.click();
    
    // Continue with address selection
    await driver.findElement(By.css(".mat-autocomplete-trigger")).click()
    await driver.findElement(By.xpath("//span[contains(.,\'16882 Woodward\')]")).click()

    // Select the radio button labeled 'Education, Research'
    const radioLabel = await driver.findElement(
      By.xpath("//div[contains(@class, 'mat-radio-label-content') and contains(., 'Education, Research')]")
    );
    await driver.executeScript("arguments[0].click();", await radioLabel.findElement(By.xpath("./ancestor::label")));
    await driver.findElement(By.xpath("//ngx-editor/div/div")).click()
    {
      const element = await driver.findElement(By.xpath("//ngx-editor/div/div"))
      await driver.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = 'Literacy for All focuses on adult and youth literacy programs, tutoring services, and ESL classes. Our mission is to empower individuals through the gift of reading and communication.'}", element)
    }
    
    // Wait for save button to be enabled
    await driver.wait(until.elementLocated(By.id("save-section-btn")), 10000)
    const saveButton = await driver.findElement(By.id("save-section-btn"))
    await driver.wait(until.elementIsEnabled(saveButton), 10000)
    
    // Click save button using JavaScript executor
    await driver.executeScript("arguments[0].click();", saveButton)
    
    // Wait for and verify toast message
    await driver.wait(until.elementLocated(By.css(".toast-message")), 10000)
    const toastMessage = await driver.findElement(By.css(".toast-message"))
    await driver.wait(until.elementIsVisible(toastMessage), 10000)
    
    // Wait for table to be present
    await driver.wait(
      until.elementLocated(By.css("p-table")),
      10000,
      "Table not found"
    )
    
    // Wait for the new Partner to appear in the table
    const partnerCell = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'body-1') and text()=' Literacy for All ']")),
      10000,
      "New Partner not found in table"
    )
    
    // Assert that the row exists
    assert.ok(partnerCell, "Row with new Partner should exist")
    
    await driver.close()
  })
})
