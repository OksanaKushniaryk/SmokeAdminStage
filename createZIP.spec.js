// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('createZIP', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('createZIP', async function() {
    // Navigate to login page
    await driver.get("https://admin.stage.vcc.hebronsoft.com/auth/login")
    await driver.manage().window().setRect({ width: 1400, height: 900 })
    
    // Wait for and fill login form
    await driver.wait(until.elementLocated(By.id("login-email")), 10000, "Login email field not found")
    await driver.findElement(By.id("login-email")).sendKeys("qwe@qwe.com")
    await driver.findElement(By.id("login-pass")).sendKeys("qweQWE123")
    await driver.findElement(By.id("log-btn")).click()
    
    // Wait for navigation and click on My Organization
    await driver.wait(until.elementLocated(By.id("organization-btn")), 10000, "My Organization button not found")
    const myOrgButton = await driver.findElement(By.id("organization-btn"))
    await myOrgButton.click()
    
    // Wait for and click on Zip Codes in the dropdown
    const zipCodesOption = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'item-title') and text()='Zip Codes']")),
      10000,
      "Zip Codes option not found"
    )
    await zipCodesOption.click()
    
    // Wait for and click Create Zip Code button
    const createZipButton = await driver.wait(
      until.elementLocated(By.xpath("//button[contains(.,'Create Zip Code')]")),
      10000,
      "Create Zip Code button not found"
    )
    await createZipButton.click()
    
    // Wait for dialog to be fully loaded and visible
    const dialog = await driver.wait(
      until.elementLocated(By.css("mat-dialog-container#manage-zip-code-dialog")),
      10000,
      "Zip code dialog not found"
    )
    
    // Wait for dialog to be visible
    await driver.wait(until.elementIsVisible(dialog), 10000, "Dialog not visible")
    
    // Find and fill the zip code input
    const zipCodeInput = await driver.wait(
      until.elementLocated(By.css("mat-dialog-container#manage-zip-code-dialog input[formcontrolname='zipCode']")),
      10000,
      "Zip code input not found"
    )
    await zipCodeInput.sendKeys("77777")
    
    // Find and fill the zip code location name input
    const zipCodeLocationInput = await driver.wait(
      until.elementLocated(By.css("mat-dialog-container#manage-zip-code-dialog input[formcontrolname='zipCodeLocationName']")),
      10000,
      "Zip code location name input not found"
    )
    await zipCodeLocationInput.sendKeys("State Test")
    
    // Submit form
    const submitButton = await driver.wait(
      until.elementLocated(By.css("mat-dialog-container#manage-zip-code-dialog button[type='submit']")),
      10000,
      "Submit button not found"
    )
    await submitButton.click()
    
    // Wait for success toast
    await driver.wait(
      until.elementLocated(By.css("#toast-container div")),
      10000,
      "Success toast not found"
    )
    
    // Wait for table to be present
    await driver.wait(
      until.elementLocated(By.css("p-table")),
      10000,
      "Table not found"
    )
    
    // Wait for the new zip code to appear in the table
    const zipCodeCell = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'body-1') and text()=' 77777 ']")),
      10000,
      "New zip code not found in table"
    )
    
    // Verify the zip code location name is correct
    const locationNameCell = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'body-1') and text()=' State Test ']")),
      10000,
      "Location name not found in table"
    )
    
    // Additional verification that both cells are in the same row
    const row = await driver.wait(
      until.elementLocated(By.xpath("//tr[.//div[contains(@class, 'body-1') and text()=' 77777 '] and .//div[contains(@class, 'body-1') and text()=' State Test ']]")),
      10000,
      "Row with both zip code and location name not found"
    )
    
    // Assert that the row exists
    assert.ok(row, "Row with new zip code and location name should exist")
  })
})
