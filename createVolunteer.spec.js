// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('createVolunteer', function () {
    this.timeout(30000)
    let driver
    let vars
    beforeEach(async function () {
        driver = await new Builder().forBrowser('chrome').build()
        vars = {}
    })
    afterEach(async function () {
        await driver.quit();
    })
    it('createVolunteer', async function () {
        // Navigate to login page
        await driver.get("https://admin.stage.vcc.hebronsoft.com/auth/login")
        await driver.manage().window().setRect({ width: 1440, height: 900 })

        // Wait for and fill login form
        await driver.wait(until.elementLocated(By.id("login-email")), 10000, "Login email field not found")
        await driver.findElement(By.id("login-email")).sendKeys("qwe@qwe.com")
        await driver.findElement(By.id("login-pass")).sendKeys("qweQWE123")
        await driver.findElement(By.id("log-btn")).click()

        // Wait for navigation and click on Partners
        await driver.wait(until.elementLocated(By.id("partners-btn")), 10000, "Partners button not found")
        const partnersButton = await driver.findElement(By.id("partners-btn"))
        await partnersButton.click()

        // Wait for and click on Needs For Volunteers in the dropdown
        const volunteersOption = await driver.wait(
            until.elementLocated(By.xpath("//div[contains(@class, 'item-title') and text()='Needs For Volunteers']")),
            10000,
            "Needs For Volunteers option not found"
        )
        await volunteersOption.click()

        // Wait for and click Create Need For Volunteers button
        const createNeedForVolunteersButton = await driver.wait(
            until.elementLocated(By.xpath("//button[contains(.,'Create Need For Volunteers')]")),
            10000
        )
        await createNeedForVolunteersButton.click()

        // Click the autocomplete input to open the dropdown
        const autocompleteInput = await driver.findElement(By.css('input.mat-autocomplete-trigger'));
        await autocompleteInput.click();

        // Wait for the dropdown option to appear and click it
        const option = await driver.wait(
            until.elementLocated(By.xpath("//mat-option//span[contains(text(), '13th Street Cat Rescue')]")),
            10000,
            "Dropdown option not found"
        );
        await option.click();

        // Fill in Title using formcontrolname attributes
        const titleInput = await driver.wait(
            until.elementLocated(By.css(" input[formcontrolname='title']")),
            10000,
            "Title input not found"
        )
        await titleInput.sendKeys(" Park Clean-Up Crew")

        // Fill in Mini Description
        const miniDescriptionInput = await driver.findElement(By.css('.mini-description-input'));
        await miniDescriptionInput.click();
        const miniDescText = 'Volunteer to help clean and beautify our local parks.';
        for (const char of miniDescText) {
            await miniDescriptionInput.sendKeys(char);
        }
        await driver.executeScript("arguments[0].blur();", miniDescriptionInput);
        // Focus the Title input to help trigger validation
        const titleInputFocus = await driver.findElement(By.css("input[formcontrolname='title']"));
        await titleInputFocus.click();

        // Fill in Description using sendKeys and blur
        const descriptionInput = await driver.findElement(By.xpath("//ngx-editor/div/div"));
        await descriptionInput.click();
        await descriptionInput.sendKeys("Join our team of volunteers for a weekend park clean-up event. Tasks include picking up litter, planting flowers, and refreshing playground areas. All supplies will be provided. It's a great way to enjoy the outdoors while giving back to your community!");
        await driver.executeScript("arguments[0].blur();", descriptionInput);

        // Find the section by its heading text, then find the checkbox input within it
        const section = await driver.findElement(By.xpath("//div[contains(., 'Address where the new volunteer opportunity will take place:')]"));
        const checkbox = await section.findElement(By.css("input[type='checkbox'].mat-checkbox-input"));
        // Check if the checkbox is enabled
        const isCheckboxEnabled = await checkbox.isEnabled();
        assert(isCheckboxEnabled, "Checkbox should be enabled");

        // Click the checkbox container instead of the input
        const checkboxContainer = await section.findElement(By.css("div.mat-checkbox-inner-container"));
        await checkboxContainer.click();

        // Wait for and verify Address Line 1 is populated
        const addressLine1Input = await driver.findElement(By.css("input[formcontrolname='addressLine']"));
        await driver.wait(until.elementIsVisible(addressLine1Input), 5000, "Address Line 1 input not visible");
        const addressLine1Value = await addressLine1Input.getAttribute('value');
        assert(addressLine1Value.length > 0, "Address Line 1 should be automatically populated");

        // Wait for and verify Zip Code is populated
        const zipCodeInput = await driver.findElement(By.css("input[formcontrolname='zipCode']"));
        await driver.wait(until.elementIsVisible(zipCodeInput), 5000, "Zip Code input not visible");
        const zipCodeValue = await zipCodeInput.getAttribute('value');
        assert(zipCodeValue.length > 0, "Zip Code should be automatically populated");

        // Select 'Ongoing' from the Type dropdown using JavaScript click
        const typeDropdown = await driver.findElement(By.css('mat-select[formcontrolname="type"]'));
        await typeDropdown.click();
        await driver.wait(until.elementLocated(By.css('.mat-select-panel')), 5000);
        const ongoingOption = await driver.findElement(By.xpath("//mat-option//span[contains(text(), 'Ongoing')]"));
        await driver.executeScript("arguments[0].click();", ongoingOption);
        await driver.sleep(500);

        // Click the dropdown and wait for options panel
        await driver.findElement(By.id("mat-select-value-1")).click()

        // Wait for the dropdown panel to be visible
        await driver.wait(
            until.elementLocated(By.css("#mat-option-0 > .mat-option-text")),
            10000,
            "Dropdown panel not found"
        )

        // Wait for save button to be present
        await driver.wait(until.elementLocated(By.id("save-section-btn")), 10000);
        const saveButton = await driver.findElement(By.id("save-section-btn"));
        const isDisplayed = await saveButton.isDisplayed();
        const isEnabled = await saveButton.isEnabled();
        const isDisabledAttr = await saveButton.getAttribute('disabled');
        console.log("Save button displayed:", isDisplayed, "enabled:", isEnabled, "disabled attribute:", isDisabledAttr);
        await driver.wait(until.elementIsEnabled(saveButton), 10000);

        // Click save button using JavaScript executor
        await driver.executeScript("arguments[0].click();", saveButton)

        // Wait for and verify toast message
        await driver.wait(until.elementLocated(By.css(".toast-message")), 10000)
        const toastMessage = await driver.findElement(By.css(".toast-message"))
        await driver.wait(until.elementIsVisible(toastMessage), 10000)

        // Wait for table to be present
        await driver.wait(
            until.elementLocated(By.css("p-table")),
            10000,
            "Table not found"
        )

        // Wait for the new Volunteer to appear in the table
        const volunteerCell = await driver.wait(
            until.elementLocated(By.xpath("//div[contains(@class, 'body-1') and text()=' Park Clean-Up Crew ']")),
            10000,
            "New Volunteer not found in table"
        )

        // Assert that the row exists
        assert.ok(volunteerCell, "Row with new Volunteer should exist")

        await driver.close()
    })
})