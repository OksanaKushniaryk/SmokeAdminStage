// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('createJob', function () {
    this.timeout(30000)
    let driver
    let vars
    beforeEach(async function () {
        driver = await new Builder().forBrowser('chrome').build()
        vars = {}
    })
    afterEach(async function () {
        await driver.quit();
    })
    it('createJob', async function () {
        // Navigate to login page
        await driver.get("https://admin.stage.vcc.hebronsoft.com/auth/login")
        await driver.manage().window().setRect({ width: 1440, height: 900 })

        // Wait for and fill login form
        await driver.wait(until.elementLocated(By.id("login-email")), 10000, "Login email field not found")
        await driver.findElement(By.id("login-email")).sendKeys("qwe@qwe.com")
        await driver.findElement(By.id("login-pass")).sendKeys("qweQWE123")
        await driver.findElement(By.id("log-btn")).click()

        // Wait for navigation and click on Partners
        await driver.wait(until.elementLocated(By.id("partners-btn")), 10000, "Partners button not found")
        const partnersButton = await driver.findElement(By.id("partners-btn"))
        await partnersButton.click()

        // Wait for and click on Paid Job Openingsin the dropdown
        const jobsOption = await driver.wait(
            until.elementLocated(By.xpath("//div[contains(@class, 'item-title') and text()='Paid Job Openings']")),
            10000,
            "Paid Job Openings option not found"
        )
        await jobsOption.click()

        // Wait for and click Create Paid Job Opening button
        const createPaidJobOpeningButton = await driver.wait(
            until.elementLocated(By.xpath("//button[contains(.,'Create Paid Job Opening')]")),
            10000
        )
        await createPaidJobOpeningButton.click()

        // Click the autocomplete input to open the dropdown
        const autocompleteInput = await driver.findElement(By.css('input.mat-autocomplete-trigger'));
        await autocompleteInput.click();

        // Wait for the dropdown option to appear and click it
        const option = await driver.wait(
            until.elementLocated(By.xpath("//mat-option//span[contains(text(), '13th Street Cat Rescue')]")),
            10000,
            "Dropdown option not found"
        );
        await option.click();

        // Fill in Title using formcontrolname attributes
        const titleInput = await driver.wait(
            until.elementLocated(By.css(" input[formcontrolname='title']")),
            10000,
            "Title input not found"
        )
        await titleInput.sendKeys("UX/UI Designer")

        // Select the radio button labeled 'Full-Time'
        const radioLabel = await driver.findElement(
            By.xpath("//div[contains(@class, 'mat-radio-label-content') and contains(., 'Full-Time')]")
        );
        await driver.executeScript("arguments[0].click();", await radioLabel.findElement(By.xpath("./ancestor::label")));

        // Select the radio button labeled ' Arts, Photography, Graphic Design '
        const radioLabel2 = await driver.findElement(
            By.xpath("//div[contains(@class, 'mat-radio-label-content') and contains(., ' Arts, Photography, Graphic Design ')]")
        );
        await driver.executeScript("arguments[0].click();", await radioLabel2.findElement(By.xpath("./ancestor::label")));

        // Focus the Title input to help trigger validation
        const titleInputFocus = await driver.findElement(By.css("input[formcontrolname='title']"));
        await titleInputFocus.click();

        // Fill in Link using formcontrolname attributes
        const linkInput = await driver.wait(
            until.elementLocated(By.css(" input[formcontrolname='link']")),
            10000,
            "Link input not found"
        )
        await linkInput.sendKeys("https://jobs.pixelcraft.io/openings/ux-ui-designer-3011")

        // Fill in Qualifications
        const qualificationsInput = await driver.findElement(By.xpath("//ngx-editor/div/div"));
        await qualificationsInput.click();
        const qualificationsText = "Degree in Design, HCI, or related field; 2+ years of experience in UX/UI design; Proficient with Figma, Adobe XD, Sketch; Understanding of user-centered design principles; Strong portfolio demonstrating design thinking and visual skills";
        for (const char of qualificationsText) {
            await qualificationsInput.sendKeys(char);
        }
        await driver.executeScript("arguments[0].blur();", qualificationsInput);

        // Fill in Responsibilities
        const responsibilitiesEditor = await driver.findElement(
            By.css("ngx-editor[formcontrolname='responsibilities'] .ProseMirror.NgxEditor__Content[contenteditable='true']")
        );
        await responsibilitiesEditor.click();
        await responsibilitiesEditor.sendKeys("Design wireframes, mockups, and prototypes. Conduct user research and usability testing. Collaborate with developers and product managers. Maintain and improve the design system. Advocate for user needs across the organization.");
        await responsibilitiesEditor.sendKeys(Key.TAB); // Move focus away to trigger validation
        await driver.sleep(1000);

        // Fill in Additional Info
        const additionalInfoEditor = await driver.findElement(
            By.css("ngx-editor[formcontrolname='additionalInformation'] .ProseMirror.NgxEditor__Content[contenteditable='true']")
        );
        await additionalInfoEditor.click();
        await additionalInfoEditor.sendKeys("Contract-to-hire position, 6 months initial term. Flexible working hours, remote-friendly. Interviews begin May 20, 2025.");
        await additionalInfoEditor.sendKeys(Key.TAB); // Move focus away to trigger validation
        await driver.sleep(1000);

        // Add a small delay to allow form validation to complete
        await driver.sleep(2000);

        // Select the radio button labeled 'Location'
        const radioLabelLocation = await driver.findElement(
            By.xpath("//div[contains(@class, 'mat-radio-label-content') and contains(., ' This position is 100% virtual ')]")
        );
        await driver.executeScript("arguments[0].click();", await radioLabelLocation.findElement(By.xpath("./ancestor::label")));

        // Wait for save button to be present
        await driver.wait(until.elementLocated(By.id("save-section-btn")), 10000);
        const saveButton = await driver.findElement(By.id("save-section-btn"));
        const isDisplayed = await saveButton.isDisplayed();
        const isEnabled = await saveButton.isEnabled();
        const isDisabledAttr = await saveButton.getAttribute('disabled');
        console.log("Save button displayed:", isDisplayed, "enabled:", isEnabled, "disabled attribute:", isDisabledAttr);
        await driver.wait(until.elementIsEnabled(saveButton), 10000);

        // Robust Save button click: scroll into view, wait, and use native click
        await driver.executeScript("arguments[0].scrollIntoView(true);", saveButton);
        await driver.sleep(500);
        await saveButton.click();
        await driver.sleep(1000); // Wait for UI to update after click

        // Wait for and verify toast message
        await driver.wait(until.elementLocated(By.css(".toast-message")), 10000)
        const toastMessage = await driver.findElement(By.css(".toast-message"))
        await driver.wait(until.elementIsVisible(toastMessage), 10000)

        // Wait for table to be present
        await driver.wait(
            until.elementLocated(By.css("p-table")),
            10000,
            "Table not found"
        )

        // Wait for the new Job to appear in the table
        const jobCell = await driver.wait(
            until.elementLocated(By.xpath("//div[contains(@class, 'body-1') and text()=' UX/UI Designer ']")),
            10000,
            "New Job not found in table"
        )

        // Assert that the row exists
        assert.ok(jobCell, "Row with new Job should exist")

        await driver.close()
    })
})