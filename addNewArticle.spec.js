// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Article', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('Article', async function() {
    // Navigate to login page
    await driver.get("https://admin.stage.vcc.hebronsoft.com/auth/login")
    await driver.manage().window().setRect({ width: 1440, height: 900 })

    //wait for and fill login form
    await driver.wait(until.elementLocated(By.id("login-email")), 10000, "Login email field not found")
    await driver.findElement(By.id("login-email")).sendKeys("qwe@qwe.com")
    await driver.findElement(By.id("login-pass")).sendKeys("qweQWE123")
    await driver.findElement(By.id("log-btn")).click()

    //wait for page load after login
    await driver.wait(until.elementLocated(By.css('body')), 10000, 'Page did not load after login')
    

    await driver.wait(until.elementLocated(By.xpath("//div/ul/li[5]")), 10000, "Blog button not found")
    const blogButton = await driver.findElement(By.xpath("//div/ul/li[5]"))
    await blogButton.click()

    //wait for and click on Add new Article button
    await driver.wait(until.elementLocated(By.xpath("//button[contains(.,'Add new article')]")), 10000, "Add new article button not found")
    const addNewArticleButton = await driver.findElement(By.xpath("//button[contains(.,'Add new article')]"))
    await addNewArticleButton.click()

    // Wait for the skills section to be visible and interactable
    await driver.wait(until.elementLocated(By.css(".skill-item")), 10000, "Skills section not found")
    
    // Add a small delay to ensure the page is fully loaded
    await driver.sleep(2000)
    
    try {
      // Try to find the skill item with a more specific selector
      const skillItem = await driver.wait(
        until.elementLocated(By.css(".skill-item:nth-child(3)")),
        10000,
        'Third skill item not found'
      )
      
      // Log the HTML of the skill item to help debug
      const skillItemHtml = await skillItem.getAttribute('outerHTML')
      console.log('Skill item HTML:', skillItemHtml)
      
      // Try to find the checkbox within the skill item
      const checkbox = await driver.wait(
        until.elementLocated(By.css(".skill-item:nth-child(3) .mat-pseudo-checkbox")),
        10000,
        'Checkbox not found within skill item'
      )
      
      await checkbox.click()
    } catch (error) {
      console.log('Error finding skill item or checkbox:', error.message)
      // Log the page source to help debug
      const pageSource = await driver.getPageSource()
      console.log('Page source:', pageSource)
    }

    await driver.findElement(By.css(".m-t-8:nth-child(3) > .ng-untouched")).click()
    await driver.findElement(By.xpath("//input[@type=\'text\']")).sendKeys("Exploring the Cosmos")
    await driver.findElement(By.css(".m-t-8 > .ng-untouched")).click()
    await driver.findElement(By.xpath("(//input[@type=\'text\'])[2]")).sendKeys("Carl Newton")
    await driver.findElement(By.id("mat-select-value-1")).click()
    await driver.findElement(By.css("#mat-option-0 > .mat-option-text")).click()
    await driver.findElement(By.css(".ng-invalid:nth-child(1)")).click()
    await driver.findElement(By.css("#mat-option-2 > .mat-option-text")).click()
    await driver.findElement(By.css(".NgxEditor__Placeholder")).click()
    {
      const element = await driver.findElement(By.css(".ProseMirror"))
      await driver.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = 'The universe holds countless mysteries. From black holes to dark matter, space continues to captivate scientists and dreamers alike.\\n'}", element)
    }
    await driver.findElement(By.id("mat-chip-list-input-0")).click()
    
    // Type "Network – Monthly" into the input field using the correct selector and select from dropdown
    try {
      // Wait for the input field to be present and interactable
      const tagInput = await driver.wait(
        until.elementLocated(By.css("input[formcontrolname='tagsCtrl']")),
        10000,
        'Tag input field not found'
      )

      // Highlight the field for debugging
      await driver.executeScript("arguments[0].style.border='3px solid red'", tagInput)

      // Type the tag
      await tagInput.sendKeys("Network – Monthly")

      // Wait for the autocomplete dropdown to appear
      const suggestion = await driver.wait(
        until.elementLocated(By.xpath("//mat-option//span[contains(text(), 'Network – Monthly')]")),
        5000,
        "Tag suggestion not found"
      )

      // Click the suggestion to select it
      await suggestion.click()

      // Wait a moment for the chip to be created
      await driver.sleep(1000)
    } catch (error) {
      console.log('Error entering Network Monthly text:', error.message)
      // Log the page source to help debug
      const pageSource = await driver.getPageSource()
      console.log('Page source after error:', pageSource)
    }
    
    await driver.findElement(By.id("save-section-btn")).click()
    
    // Wait for and find the toast notification
    try {
      // First wait for any toast to be present
      await driver.wait(until.elementLocated(By.css(".toast-container")), 10000, "Toast container not found")
      
      // Log the page source to see the toast structure
      const pageSource = await driver.getPageSource()
      console.log('Page source after save:', pageSource)
      
      // Try to find the toast title with a more specific selector
      const toastTitle = await driver.wait(
        until.elementLocated(By.css(".toast-container .toast-title")),
        10000,
        'Toast title not found'
      )
      
      // Log the found element's HTML
      const elementHtml = await toastTitle.getAttribute('outerHTML')
      console.log('Found toast title element:', elementHtml)
      
      await toastTitle.click()
    } catch (error) {
      console.log('Error finding toast notification:', error.message)
      // Log the page source to help debug
      const pageSource = await driver.getPageSource()
      console.log('Page source after error:', pageSource)
    }
// Wait for table to be present
await driver.wait(
  until.elementLocated(By.css("p-table")),
  10000,
  "Table not found"
)

// Wait for the new Article to appear in the table
const articleCell = await driver.wait(
  until.elementLocated(By.xpath("//div[contains(@class, 'body-1') and text()=' Exploring the Cosmos ']")),
  10000,
  "New Article not found in table"
)

// Assert that the row exists
assert.ok(articleCell, "Row with new Article should exist")

await driver.close()

  })
})
