// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')
const fs = require('fs')

describe('addUserCP', function() {
  this.timeout(60000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('should log in and fill user fields', async function() {
    // 1. Go to login page
    await driver.get("https://admin.stage.vcc.hebronsoft.com/auth/login")
    await driver.manage().window().setRect({ width: 1440, height: 900 })

    // 2. Log in
    await driver.wait(until.elementLocated(By.id("login-email")), 10000)
    await driver.findElement(By.id("login-email")).sendKeys("qwe@qwe.com")
    await driver.findElement(By.id("login-pass")).sendKeys("qweQWE123")
    await driver.findElement(By.id("log-btn")).click()

    // 3. Wait for dashboard to confirm login
    await driver.wait(until.elementLocated(By.id("partners-btn")), 10000, "Login failed or dashboard not loaded")
    await driver.takeScreenshot().then(img => fs.writeFileSync('debug_after_login.png', img, 'base64'))

    // 4. Click Partners
    await driver.findElement(By.id("partners-btn")).click()

    // 5. Click Community Partners
    const communityPartnersOption = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'item-title') and text()='Community Partners']")),
      10000
    )
    await communityPartnersOption.click()

    // 6. Wait for filter input and filter for 'hebron'
    await driver.wait(until.urlContains('/company/list'), 10000)
    const nameFilterInput = await driver.wait(
      until.elementLocated(By.css('input.p-column-filter.max-with.p-inputtext.p-component')),
      10000
    )
    await nameFilterInput.clear()
    await nameFilterInput.sendKeys('hebron')

    // 7. Wait for HEBRON row and click it
    const hebronRow = await driver.wait(
      until.elementLocated(By.xpath("//div[contains(@class, 'pointable') and contains(translate(normalize-space(text()), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'), 'HEBRON')]")),
      10000
    )
    await driver.wait(until.elementIsVisible(hebronRow), 10000)
    await hebronRow.click()

    // 8. Click the "2. Users" tab
    const usersTab = await driver.wait(
      until.elementLocated(By.xpath("//a[contains(@class, 'body-2') and contains(normalize-space(text()), '2. Users')]")),
      10000
    )
    await driver.wait(until.elementIsVisible(usersTab), 10000)
    await usersTab.click()

    // 9. Click "Add New User"
    const addNewUserBtn = await driver.wait(
      until.elementLocated(By.xpath("//button[contains(., 'Add New User')]")),
      10000
    )
    await driver.wait(until.elementIsVisible(addNewUserBtn), 10000)
    await addNewUserBtn.click()

    // 10. Wait for the form fields to be present and visible
    const firstNameInput = await driver.wait(
      until.elementLocated(By.css('input[formcontrolname="firstName"]')),
      10000
    )
    await driver.wait(until.elementIsVisible(firstNameInput), 10000)

    // 11. Fill the fields
    await firstNameInput.clear()
    await firstNameInput.sendKeys('Tomas')

    const lastNameInput = await driver.wait(
      until.elementLocated(By.css('input[formcontrolname="lastName"]')),
      10000
    )
    await lastNameInput.clear()
    await lastNameInput.sendKeys('Green')

    const emailInput = await driver.wait(
      until.elementLocated(By.css('input[formcontrolname="email"]')),
      10000
    )
    await emailInput.clear()
    await emailInput.sendKeys('tomas@hebron.com')

    // 12. Take a screenshot after filling fields
    await driver.takeScreenshot().then(img => fs.writeFileSync('debug_after_fill_fields.png', img, 'base64'))

    // Wait for the Save Section button to become enabled
    const saveBtn = await driver.wait(
      until.elementLocated(By.id("save-section-btn")),
      10000,
      "Save Section button not found"
    );

    // Wait until the button is enabled
    await driver.wait(async () => {
      return await saveBtn.isEnabled();
    }, 10000, "Save Section button did not become enabled");

    // Click the button
    await saveBtn.click();

    // Wait for the table to update (adjust selector as needed)
    await driver.sleep(2000); // or use a more robust wait for the table to refresh

    // Find all rows in the user list
    const userRows = await driver.findElements(By.css('tbody tr'));

    // Check if any row contains the new last name
    let found = false;
    for (const row of userRows) {
      const text = await row.getText();
      if (text.includes('Green')) { // 'Green' is the last name you used
        found = true;
        break;
      }
    }
    assert.ok(found, 'New user with last name "Green" not found in the list');
  })

})
